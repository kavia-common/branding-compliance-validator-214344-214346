{"is_source_file": true, "format": "JavaScript (JSX)", "description": "This is a React component that serves as the main dashboard screen of a web application. It manages user uploads, job status polling, preview fetching, and results display, specifically for compliance and audit-related features. The file includes UI logic, state management, and integration points with APIs and hooks.", "external_files": ["../components/UploadPanel", "../utils/errorHandling", "../components/ResultsTable", "../hooks/usePollingJobStatus", "../components/PreviewPane", "../api/client"], "external_methods": ["formatApiError", "getJson"], "published": ["Dashboard"], "classes": [], "methods": [{"name": "fetchPreviews", "description": "Fetches preview images or data related to a specific job ID, updating the previews state."}, {"name": "onJobStarted", "description": "Handles initialization when a new job starts, setting state and initiating polling and preview fetch."}, {"name": "mockDownload", "description": "Simulates the download action with an e-sign placeholder alert for role-based actions."}, {"name": "Dashboard({ user })", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["usePollingJobStatus", "getJson", "setPreviews", "formatApiError", "startPolling", "stopPolling", "fetchPreviews", "setJob", "setNotice", "setPreview", "setPreviews", "useEffect", "refreshNow"], "search-terms": ["Dashboard", "ResultsTable", "usePollingJobStatus", "PreviewPane", "UploadPanel", "compliance", "audit placeholders", "role-gated actions", "GxP", "Results & Flags", "Preview", "Download Fixed Zip"], "state": 2, "file_id": 16, "knowledge_revision": 67, "git_revision": "e529cbe8b9fbd1fc0eff615e7ce27d69e832273d", "revision_history": [{"33": ""}, {"51": "0e92768c759172b24e12d7bb470e6fb6a736541f"}, {"53": "0e92768c759172b24e12d7bb470e6fb6a736541f"}, {"58": "f2fa9c71054b0658fc4b6810ebe9244c62780f76"}, {"59": "f2fa9c71054b0658fc4b6810ebe9244c62780f76"}, {"62": "8330b94e695d6b62e42f29fe0dd901e1904109c8"}, {"63": "8330b94e695d6b62e42f29fe0dd901e1904109c8"}, {"64": "8330b94e695d6b62e42f29fe0dd901e1904109c8"}, {"65": "8330b94e695d6b62e42f29fe0dd901e1904109c8"}, {"67": "e529cbe8b9fbd1fc0eff615e7ce27d69e832273d"}], "ctags": [{"_type": "tag", "name": "Dashboard", "path": "/home/kavia/workspace/code-generation/branding-compliance-validator-214344-214346/branding_compliance_frontend/src/screens/Dashboard.jsx", "pattern": "/^export default function Dashboard({ user }) {$/", "language": "JavaScript", "kind": "function", "signature": "({ user })"}, {"_type": "tag", "name": "job", "path": "/home/kavia/workspace/code-generation/branding-compliance-validator-214344-214346/branding_compliance_frontend/src/screens/Dashboard.jsx", "pattern": "/^              jobId={job?.id || null}$/", "language": "JavaScript", "kind": "field", "scope": "Dashboard.jobId", "scopeKind": "class"}, {"_type": "tag", "name": "jobId", "path": "/home/kavia/workspace/code-generation/branding-compliance-validator-214344-214346/branding_compliance_frontend/src/screens/Dashboard.jsx", "pattern": "/^  const onJobStarted = ({ jobId, status }) => {$/", "language": "JavaScript", "kind": "field", "scope": "Dashboard.onJobStarted", "scopeKind": "class"}, {"_type": "tag", "name": "preview", "path": "/home/kavia/workspace/code-generation/branding-compliance-validator-214344-214346/branding_compliance_frontend/src/screens/Dashboard.jsx", "pattern": "/^              selected={preview}$/", "language": "JavaScript", "kind": "field", "scope": "Dashboard.selected", "scopeKind": "class"}, {"_type": "tag", "name": "user", "path": "/home/kavia/workspace/code-generation/branding-compliance-validator-214344-214346/branding_compliance_frontend/src/screens/Dashboard.jsx", "pattern": "/^              user={user}$/", "language": "JavaScript", "kind": "field", "scope": "Dashboard.user", "scopeKind": "class"}], "hash": "4953fe42bc68aeacdfb1decc5bea1d2d", "format-version": 4, "code-base-name": "branding_compliance_frontend", "filename": "branding_compliance_frontend/src/screens/Dashboard.jsx", "fields": [{"name": "jobId={job?.id || null}", "scope": "Dashboard.jobId", "scopeKind": "class", "description": "unavailable"}, {"name": "const onJobStarted = ({ jobId, status }) => {", "scope": "Dashboard.onJobStarted", "scopeKind": "class", "description": "unavailable"}, {"name": "selected={preview}", "scope": "Dashboard.selected", "scopeKind": "class", "description": "unavailable"}, {"name": "user={user}", "scope": "Dashboard.user", "scopeKind": "class", "description": "unavailable"}]}